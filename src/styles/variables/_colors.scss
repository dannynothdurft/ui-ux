// =============================================================================
// COLOR SYSTEM WITH SHADES (50–900) + NEUTRALS & SEMANTIC VARIABLES
// =============================================================================

// PALETTES
// =============================================================================

$palette-primary: (
  50:  #eff6ff,
  100: #dbeafe,
  200: #bfdbfe,
  300: #93c5fd,
  400: #60a5fa,
  500: #3b82f6,
  600: #2563eb,
  700: #1d4ed8,
  800: #1e40af,
  900: #1e3a8a
) !default;

$palette-secondary: (
  50:  #f5f3ff,
  100: #ede9fe,
  200: #ddd6fe,
  300: #c4b5fd,
  400: #a78bfa,
  500: #8b5cf6,
  600: #7c3aed,
  700: #6d28d9,
  800: #5b21b6,
  900: #4c1d95
) !default;

$palette-accent: (
  50:  #fdf2f8,
  100: #fce7f3,
  200: #fbcfe8,
  300: #f9a8d4,
  400: #f472b6,
  500: #ec4899,
  600: #db2777,
  700: #be185d,
  800: #9d174d,
  900: #831843
) !default;

$palette-success: (
  100: #dcfce7,
  500: #10b981,
  700: #047857
) !default;

$palette-warning: (
  100: #fef3c7,
  500: #f59e0b,
  700: #b45309
) !default;

$palette-error: (
  100: #fee2e2,
  500: #ef4444,
  700: #b91c1c
) !default;

$palette-info: (
  100: #cffafe,
  500: #06b6d4,
  700: #0e7490
) !default;

$palette-gray: (
  50:  #f9fafb,
  100: #f3f4f6,
  200: #e5e7eb,
  300: #d1d5db,
  400: #9ca3af,
  500: #6b7280,
  600: #4b5563,
  700: #374151,
  800: #1f2937,
  900: #111827
) !default;

$color-white: #ededed !default;
$color-black: #1f1f1f !default;

$palettes: (
  'primary': $palette-primary,
  'secondary': $palette-secondary,
  'accent': $palette-accent,
  'success': $palette-success,
  'warning': $palette-warning,
  'error': $palette-error,
  'info': $palette-info,
  'gray': $palette-gray
) !default;


// COLOR FUNCTIONS
// =============================================================================

// Interne Helfer-Funktion: hole Palette-Map aus $palettes wenn $palette ein String ist
@function _resolve-palette($palette-or-name) {
  @if type-of($palette-or-name) == 'string' {
    @if map-has-key($palettes, $palette-or-name) {
      @return map-get($palettes, $palette-or-name);
    } @else {
      @error "Palette '#{$palette-or-name}' wurde nicht gefunden in $palettes.";
    }
  } @else if type-of($palette-or-name) == 'map' {
    @return $palette-or-name;
  } @else {
    @error "Erwarte Palette (Map) oder Palette-Name (String).";
  }
}

// Hole Shade aus Palette (akzeptiert Map oder String-Name)
@function palette($palette-or-name, $shade) {
  $palette-map: _resolve-palette($palette-or-name);
  @if map-has-key($palette-map, $shade) {
    @return map-get($palette-map, $shade);
  } @else {
    @error "Shade '#{$shade}' wurde in der Palette nicht gefunden.";
  }
}

// Convenience: color('primary', 500)
@function color($name, $shade: 500) {
  @return palette($name, $shade);
}

// Convenience: gray(700)
@function gray($shade: 500) {
  @return palette('gray', $shade);
}

// Opacity helper
@function color-with-alpha($value, $alpha) {
  @return rgba($value, $alpha);
}

@function palette-opacity($palette-or-name, $shade, $alpha) {
  @return rgba(palette($palette-or-name, $shade), $alpha);
}

// =============================================================================
// CSS-Custom-PROPERTIES (automatisch für alle Paletten & Shades)
// =============================================================================

:root {
  /* Palette variables -- color-{name}-{shade} */
  @each $name, $palette-map in $palettes {
    @each $shade, $value in $palette-map {
      --color-#{$name}-#{$shade}: #{$value};
    }
  }

  /* Semantic shortcuts (referenzieren die shade-Variablen) */
  --color-primary: var(--color-primary-500);
  --color-secondary: var(--color-secondary-500);
  --color-accent: var(--color-accent-500);

  --color-text-primary: var(--color-gray-900);
  --color-text-secondary: var(--color-gray-600);
  --color-text-tertiary: var(--color-gray-400);
  --color-text-inverse: var(--color-white);

  --color-background-primary: var(--color-gray-50);
  --color-background-secondary: var(--color-gray-100);
  --color-background-tertiary: var(--color-gray-200);
  --color-background-inverse: var(--color-gray-900);

  --color-border-primary: var(--color-gray-300);
  --color-border-secondary: var(--color-gray-200);
  --color-border-tertiary: var(--color-gray-100);
}

/* Dark mode semantic overrides (prefers-color-scheme) */
@media (prefers-color-scheme: dark) {
  :root {
    --color-text-primary: var(--color-gray-100);
    --color-text-secondary: var(--color-gray-300);
    --color-background-primary: var(--color-gray-900);
    --color-background-secondary: var(--color-gray-800);
    --color-background-tertiary: var(--color-gray-700);
    --color-border-primary: var(--color-gray-700);
  }
}

// =============================================================================
// UTILITIES / MIXINS
// =============================================================================

// Background helper: akzeptiert Palette-Name (String) oder Map
@mixin bg-color($palette-or-name, $shade) {
  background-color: palette($palette-or-name, $shade);
}

// Text color helper
@mixin text-color($palette-or-name, $shade) {
  color: palette($palette-or-name, $shade);
}

// Border helper
@mixin border-color($palette-or-name, $shade) {
  border-color: palette($palette-or-name, $shade);
}

// Transition helper
@mixin color-transition($properties: all, $duration: 0.2s, $timing: ease-in-out) {
  transition: $properties $duration $timing;
}

// Auto-contrast helper: wählt Textfarbe (hell/dunkel) basierend auf Hintergrund-Lightness
@mixin color-variant($background, $text: null, $border: null) {
  background-color: $background;

  @if $text != null {
    color: $text;
  } @else {
    // Fallback: wenn Hintergrund hell -> dunkler Text, sonst heller Text
    @if lightness($background) > 60 {
      color: palette('gray', 900);
    } @else {
      color: palette('gray', 50);
    }
  }

  @if $border != null {
    border-color: $border;
  }
}